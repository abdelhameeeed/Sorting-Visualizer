{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function BubbleSort(arr) {\n  const animations = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let minn = arr[i];\n    let ind = i;\n\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] < minn) {\n        minn = arr[j];\n        ind = j;\n      }\n    }\n\n    animations.push([i, ind]); //compare \n\n    animations.push([i, ind]); //compare \n\n    animations.push([i, minn]); //overwrite \n\n    animations.push([ind, arr[i]]); //overwrite \n\n    arr[ind] = [arr[i], arr[i] = arr[ind]][0];\n  }\n\n  return animations;\n}\n_c = BubbleSort;\nexport function InsertionSortt(arr) {\n  const animations = [];\n\n  for (let i = 1; i < arr.length; i++) {\n    // unsorted part\n    for (let j = i - 1; j >= 0; j--) {\n      // sorted part \n      if (arr[j + 1] < arr[j]) {\n        animations.push([j + 1, j]); // 0\n\n        animations.push([j + 1, j]); // 1\n\n        animations.push([j + 1, arr[j]]); // 2 \n\n        animations.push([j, arr[j + 1]]); // 3 \n\n        let t = arr[j + 1];\n        arr[j + 1] = arr[j];\n        arr[j] = t;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return animations;\n}\n_c2 = InsertionSortt;\nexport function QuickSort(arr) {\n  const animations = [];\n  solve(arr, 0, arr.length - 1, animations);\n  return animations;\n}\n_c3 = QuickSort;\nexport function solve(arr, start, end, animations) {\n  if (start > end) return;\n  if (start == end) return start;\n  const ind = partition(arr, start, end, animations);\n  solve(arr, start, ind - 1, animations);\n  solve(arr, ind + 1, end, animations);\n}\nexport function partition(arr, start, end, animations) {\n  // pivot at the last index \n  let piv_index = start;\n  animations.push([-end, -end]);\n  animations.push([-end, -end]);\n\n  for (let i = start; i < end; i++) {\n    if (arr[i] < arr[end]) {\n      animations.push([i, arr[piv_index]]);\n      animations.push([-end, -end]);\n      animations.push([piv_index, arr[i]]);\n      animations.push([-end, -end]);\n      let t = arr[i];\n      arr[i] = arr[piv_index];\n      arr[piv_index] = t;\n      ++piv_index;\n    }\n  }\n\n  let t = arr[end];\n  animations.push([-end, -end]);\n  animations.push([-end, -end]);\n  animations.push([end, arr[piv_index]]);\n  animations.push([piv_index, arr[end]]);\n  arr[end] = arr[piv_index];\n  arr[piv_index] = t;\n  return piv_index;\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"BubbleSort\");\n$RefreshReg$(_c2, \"InsertionSortt\");\n$RefreshReg$(_c3, \"QuickSort\");","map":{"version":3,"sources":["/media/ahmed/01D66E59AEAFF480/sortingvisualizer/src/sortingalgorithms/sortingalgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","BubbleSort","arr","minn","ind","InsertionSortt","t","QuickSort","solve","start","end","partition","piv_index"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray,animations);\n  }\n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  export function BubbleSort(arr){\n    const animations = [] ;\n   for(let i = 0 ; i < arr.length; i ++ ){\n     let  minn = arr[i] ;\n     let ind = i        ;\n     for (let j = i  + 1 ; j < arr.length; j ++ ){\n       if( arr[j] < minn ){\n         minn = arr[j] ; \n         ind = j ;\n       }\n     }\n     animations.push([i , ind ] ) ; //compare \n     animations.push([i , ind ] ) ; //compare \n     animations.push([i , minn ] ) ; //overwrite \n     animations.push([ind , arr[i] ] ) ; //overwrite \n     arr[ind] = [arr[i], arr[i] = arr[ind]][0];\n   }\n   return animations ; \n  }\n  export function InsertionSortt(arr){\n    const animations = [] ;\n    for(let i = 1 ; i < arr.length ; i ++ ){ // unsorted part\n      for(let j = i  - 1 ; j >= 0 ; j -- ){ // sorted part \n        if(arr[j+1] < arr[j] ){\n          animations.push([ j+1 , j ])      ; // 0\n          animations.push([ j+1 , j ])      ; // 1\n          animations.push([ j+1 , arr[j] ]) ; // 2 \n          animations.push([ j , arr[j+1] ]) ; // 3 \n          let t = arr[j+1] ;\n          arr[j+1] = arr[j] ; \n          arr[j] = t ;\n        }\n        else{\n          break ;\n        }\n      }\n    }\n    return animations ;\n  }\n  export function QuickSort( arr ) {\n    const animations = [] ;\n     solve( arr , 0 , arr.length - 1 , animations ) ;\n     return animations ;\n    \n  }\n  export function solve(arr , start , end , animations ){\n    if(start > end ) return  ;\n    if(start == end ) return start;     \n    const ind = partition( arr , start , end , animations ) ;\n    solve( arr , start , ind - 1 , animations) ; \n    solve(arr , ind + 1 , end , animations)    ;\n  }\n  export function partition(arr ,  start , end , animations ){\n    // pivot at the last index \n    let piv_index = start;\n    animations.push([-end,-end])             ;\n    animations.push([-end,-end ])            ;\n    for(let i = start ; i < end ; i ++ ){\n      if(arr[i] < arr[end] ){\n        animations.push([ i , arr[piv_index]      ]) ;\n        animations.push([ -end , -end  ])            ;\n        animations.push([ piv_index , arr[i] ])      ;\n        animations.push([ -end , -end  ])            ;\n        let t = arr[i] ;\n        arr[i] = arr[piv_index] ;\n        arr[piv_index] = t ;\n        ++piv_index ;\n      }\n    }\n    let t = arr[end] ;\n    animations.push([ -end , -end  ])            ;\n    animations.push([ -end , -end  ])            ;\n    animations.push([end , arr[piv_index]]);\n    animations.push([piv_index , arr[end]]);\n    arr[end] =  arr[piv_index] ;\n    arr[piv_index] = t ;\n    return piv_index   ;\n  }\n  "]},"metadata":{},"sourceType":"module"}