{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length == 1) return array;\n  const middleIdx = Math.floor(array.length / 2);\n  const firsthalf = mergeSort(array.slice(0, middleIdx));\n  const secondhalf = mergeSort(array.slice(middleIdx));\n  const sortedarray = [];\n  let i = 0,\n      j = 0;\n\n  while (i < firsthalf.length && j < secondhalf.length) {\n    if (firsthalf[i] < secondhalf[j]) {\n      sortedarray.push(firsthalf[i++]);\n    } else {\n      sortedarray.push(secondhalf[j++]);\n    }\n  }\n\n  while (i < firsthalf.length) {\n    sortedarray.push(firsthalf[i++]);\n  }\n\n  while (j < secondhalf.length) {\n    sortedarray.push(secondhalf[i++]);\n  }\n\n  return sortedarray;\n};","map":{"version":3,"sources":["/media/ahmed/01D66E59AEAFF480/sortingvisualizer/src/sortingalgorithms/sortingalgorithms.js"],"names":["mergeSort","array","length","middleIdx","Math","floor","firsthalf","slice","secondhalf","sortedarray","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGC,KAAK,IAAI;AAC9B,MAAGA,KAAK,CAACC,MAAN,IAAgB,CAAnB,EAAuB,OAAOD,KAAP;AACvB,QAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAe,CAA1B,CAAlB;AACA,QAAMI,SAAS,GAAGN,SAAS,CAACC,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAgBJ,SAAhB,CAAD,CAA3B;AACA,QAAMK,UAAU,GAAGR,SAAS,CAACC,KAAK,CAACM,KAAN,CAAaJ,SAAb,CAAD,CAA5B;AACA,QAAMM,WAAW,GAAG,EAApB;AACA,MAAIC,CAAC,GAAG,CAAR;AAAA,MAAWC,CAAC,GAAG,CAAf;;AACA,SAAMD,CAAC,GAAGJ,SAAS,CAACJ,MAAd,IAAwBS,CAAC,GAAGH,UAAU,CAACN,MAA7C,EAAqD;AACjD,QAAGI,SAAS,CAACI,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA5B,EAAiC;AAC7BF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH,KAFD,MAEM;AACFD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;AACJ;;AACD,SAAMD,CAAC,GAAGJ,SAAS,CAACJ,MAApB,EAA6B;AACzBO,IAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH;;AACD,SAAMC,CAAC,GAAGH,UAAU,CAACN,MAArB,EAA8B;AAC1BO,IAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACE,CAAC,EAAF,CAA3B;AACH;;AACD,SAAOD,WAAP;AACH,CArBM","sourcesContent":["export const mergeSort = array => {\n    if(array.length == 1 ) return array ;\n    const middleIdx = Math.floor(array.length / 2 ) ;\n    const firsthalf = mergeSort(array.slice(0 , middleIdx ) ) ;\n    const secondhalf = mergeSort(array.slice( middleIdx ) ) ;\n    const sortedarray = [] ;\n    let i = 0 ,j = 0 ;\n    while(i < firsthalf.length && j < secondhalf.length ){\n        if(firsthalf[i] < secondhalf[j] ){\n            sortedarray.push(firsthalf[i++]);\n        } else{\n            sortedarray.push(secondhalf[j++]);\n        }\n    }\n    while(i < firsthalf.length ) {\n        sortedarray.push(firsthalf[i++]);\n    }\n    while(j < secondhalf.length ) {\n        sortedarray.push(secondhalf[i++]);\n    }\n    return sortedarray ;\n};"]},"metadata":{},"sourceType":"module"}