{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/media/ahmed/01D66E59AEAFF480/sortingvisualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingalgorithms/sortingalgorithms.js';\nimport { BubbleSort } from '../sortingalgorithms/sortingalgorithms.js';\nimport { InsertionSortt } from '../sortingalgorithms/sortingalgorithms.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 470; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'orange'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'black';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 720));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  InsertionSort() {\n    const animations = InsertionSortt(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('bar');\n      const iscolorchange = i % 4 == 0 || i % 4 == 1;\n\n      if (iscolorchange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    const animations = BubbleSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arraybars = document.getElementsByClassName('bar');\n      const is_over_write = i % 4 === 2 || i % 4 === 3;\n\n      if (!is_over_write) {\n        let color = i % 2 == 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOnestyle = arraybars[barOneIdx].style;\n        const barTwostyle = arraybars[barTwoIdx].style;\n        setTimeout(() => {\n          barOnestyle.backgroundColor = color;\n          barTwostyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arraybars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  testSortingAlgorithms() {\n    const all_ = randomIntFromInterval(100, 1000);\n\n    for (let i = 0; i < all_; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const temp = this.state.array.slice();\n      const javaScriptSortedArray = temp.sort((a, b) => a - b);\n      InsertionSortt(this.state.array);\n      console.log(arraysAreEqual(this.state.array, temp));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar_container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\",\n        style: {\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.resetArray(),\n        className: \"btn\",\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.mergeSort(),\n        className: \"btn\",\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.quickSort(),\n        className: \"btn\",\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.heapSort(),\n        className: \"btn\",\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.bubbleSort(),\n        className: \"btn\",\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.InsertionSort(),\n        className: \"btn\",\n        children: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.testSortingAlgorithms(),\n        className: \"btn\",\n        children: \"Test Sorting Algorithms (BROKEN)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/media/ahmed/01D66E59AEAFF480/sortingvisualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","BubbleSort","InsertionSortt","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","InsertionSort","iscolorchange","quickSort","heapSort","bubbleSort","arraybars","is_over_write","barOnestyle","barTwostyle","testSortingAlgorithms","all_","temp","slice","javaScriptSortedArray","sort","a","b","console","log","arraysAreEqual","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingalgorithms/sortingalgorithms.js';\nimport {BubbleSort} from '../sortingalgorithms/sortingalgorithms.js' ;\nimport {InsertionSortt} from '../sortingalgorithms/sortingalgorithms.js' ;\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 470;\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'orange';\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'black';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 720));\n    }\n    this.setState({array});\n  }\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  InsertionSort(){\n    const animations  = InsertionSortt(this.state.array) ;\n    for(let i = 0 ; i < animations.length; i ++ ){\n      const arrayBars = document.getElementsByClassName('bar');\n      const iscolorchange = i % 4 == 0 || i % 4 == 1 ; \n      if(iscolorchange){\n        const [barOneIdx , barTwoIdx ] = animations[i] ;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else{\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n  bubbleSort() {\n    const animations  = BubbleSort(this.state.array) ; \n    for(let i = 0 ; i < animations.length ; i ++ ){\n      const arraybars = document.getElementsByClassName('bar') ;\n      const is_over_write = i % 4 === 2 || i % 4 === 3  ;\n      if(!is_over_write){\n        let color = i % 2 == 0 ? SECONDARY_COLOR : PRIMARY_COLOR ; \n        const [barOneIdx, barTwoIdx] = animations[i]   ;\n        const barOnestyle = arraybars[barOneIdx].style ; \n        const barTwostyle = arraybars[barTwoIdx].style ;\n        setTimeout(() => {\n          barOnestyle.backgroundColor = color ;\n          barTwostyle.backgroundColor = color ;\n        }, i * ANIMATION_SPEED_MS ) ;\n      } \n      else{\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i] ;\n          const barOneStyle = arraybars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  testSortingAlgorithms() {\n    const all_ = randomIntFromInterval(100 , 1000 ) ;\n    for (let i = 0; i < all_; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const temp = this.state.array.slice() ;\n      const javaScriptSortedArray = temp.sort((a, b) => a - b);\n      InsertionSortt(this.state.array);\n      console.log(arraysAreEqual(this.state.array , temp));\n    }\n  }\n  render() {\n    const {array} = this.state;\n    return (\n      <div className=\"bar_container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()} className=\"btn\">Generate New Array</button>\n        <button onClick={() => this.mergeSort()}className=\"btn\">Merge Sort</button>\n        <button onClick={() => this.quickSort()}className=\"btn\">Quick Sort</button>\n        <button onClick={() => this.heapSort()}className=\"btn\">Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}className=\"btn\">Bubble Sort</button>\n        <button onClick={() => this.InsertionSort()}className=\"btn\">Insertion Sort</button>\n        <button onClick={() => this.testSortingAlgorithms()}className=\"btn\">\n          Test Sorting Algorithms (BROKEN)\n        </button>\n      </div>\n    );\n  }\n}\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"module"}