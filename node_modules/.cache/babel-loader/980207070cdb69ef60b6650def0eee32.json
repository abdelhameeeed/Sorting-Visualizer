{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/media/ahmed/01D66E59AEAFF480/sortingvisualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { mergeSort } from '../sortingalgorithms/sortingalgorithms';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../sortingalgorithms/sortingalgorithms.js';\nconst ANIMATION_SPEED_MS = 1;\nconst NUMBER_OF_ARRAY_BARS = 310;\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(Random_numbers(5, 725));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quicksort() {}\n\n  insertionsort() {}\n\n  bubblesort() {}\n\n  heapsort() {}\n\n  heapsort() {}\n  /*\n  Test_sorting_algo(){\n      const len = Random_numbers(1 , 1000 ) ;\n      for(let i = 0 ; i < len ; i ++ ){\n          const arr = [] ; \n          const sz =  Random_numbers(1 , 1000 ) ; \n          for(let j = 0 ; j < sz; j ++ ){\n              arr.push(   Random_numbers(-1000 , 1000 ) ) ;\n          } \n          const javasortedarray = arr.slice()\n          .sort((a,b) => a - b );\n          const sorted_one = mergeSort(arr);\n          console.log(AreEqual(sorted_one , javasortedarray ) ) ;\n      }\n   }\n  */\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar_container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.resetArray(),\n          className: \"btn\",\n          children: \"Generate a new array  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          className: \"btn\",\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.quicksort(),\n          className: \"btn\",\n          children: \"Quick Sort \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.insertionsort(),\n          className: \"btn\",\n          children: \"Insertion Sort \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.bubblesort(),\n          className: \"btn\",\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.heapsort(),\n          className: \"btn\",\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction Random_numbers(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n_c = Random_numbers;\n\nfunction AreEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false;\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] != arr2[i]) return false;\n  }\n\n  return true;\n}\n\n_c2 = AreEqual;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Random_numbers\");\n$RefreshReg$(_c2, \"AreEqual\");","map":{"version":3,"sources":["/media/ahmed/01D66E59AEAFF480/sortingvisualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","mergeSort","getMergeSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","Random_numbers","setState","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quicksort","insertionsort","bubblesort","heapsort","render","map","value","idx","min","max","Math","floor","random","AreEqual","arr1","arr2"],"mappings":"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","sourcesContent":["import React from  'react' ;\nimport { mergeSort } from '../sortingalgorithms/sortingalgorithms';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../sortingalgorithms/sortingalgorithms.js';\nconst ANIMATION_SPEED_MS = 1;\n\nconst NUMBER_OF_ARRAY_BARS = 310;\n\nconst PRIMARY_COLOR = 'turquoise';\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            array:[] ,\n        };\n    }\n    componentDidMount(){\n        this.resetArray();\n    }\n    resetArray(){\n        const array = [] ;\n        for(let i = 0 ; i < NUMBER_OF_ARRAY_BARS ; i ++ ){\n            array.push(Random_numbers(5 , 725 ) ) ;\n        }\n        this.setState({array});\n    }\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n          const arrayBars = document.getElementsByClassName('array-bar');\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n      }\n    quicksort(){}\n    insertionsort(){}\n    bubblesort(){}\n    heapsort(){}\n    heapsort(){}\n    /*\n    Test_sorting_algo(){\n        const len = Random_numbers(1 , 1000 ) ;\n        for(let i = 0 ; i < len ; i ++ ){\n            const arr = [] ; \n            const sz =  Random_numbers(1 , 1000 ) ; \n            for(let j = 0 ; j < sz; j ++ ){\n                arr.push(   Random_numbers(-1000 , 1000 ) ) ;\n            } \n            const javasortedarray = arr.slice()\n            .sort((a,b) => a - b );\n            const sorted_one = mergeSort(arr);\n            console.log(AreEqual(sorted_one , javasortedarray ) ) ;\n        }\n\n    }\n    */\n    render(){\n        const {array} = this.state ;\n        return(\n            <div className = \"bar_container\">\n            {array.map((value,idx)=>(\n                <div className= \"bar\" key = {idx}\n                style = {{height:`${value}px`}}></div>\n            ))}\n            <div>\n            <button onClick={() => this.resetArray() } className = \"btn\">Generate a new array  </button>\n            <button  onClick={() => this.mergeSort() } className = \"btn\">Merge Sort</button>\n            <button  onClick={() => this.quicksort() } className = \"btn\">Quick Sort </button>\n            <button  onClick={() => this.insertionsort() } className = \"btn\">Insertion Sort </button>\n            <button  onClick={() => this.bubblesort() } className = \"btn\">Bubble Sort</button>\n            <button  onClick={() => this.heapsort() } className = \"btn\">Heap Sort</button>\n            </div>\n            </div>\n        );\n    }\n    }\nfunction Random_numbers(min , max ){\n    return Math.floor(Math.random() * (max - min + 1 ) + min ) ;\n}\nfunction AreEqual(arr1 , arr2 ){\n    if(arr1.length !== arr2.length ) return false;\n    for(let i = 0 ; i < arr1.length ; i ++ ){\n        if(arr1[i] != arr2[i] ) return false ;\n    }\n    return true ;\n}"]},"metadata":{},"sourceType":"module"}